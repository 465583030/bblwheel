// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Request
	Response
	Message
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	ID         int64             `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ClientID   string            `protobuf:"bytes,2,opt,name=ClientID" json:"ClientID,omitempty"`
	ClientAddr string            `protobuf:"bytes,3,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
	Timestamp  int64             `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ForwardFor []string          `protobuf:"bytes,5,rep,name=ForwardFor" json:"ForwardFor,omitempty"`
	Path       string            `protobuf:"bytes,6,opt,name=Path" json:"Path,omitempty"`
	Token      string            `protobuf:"bytes,7,opt,name=Token" json:"Token,omitempty"`
	Content    []byte            `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`
	Params     map[string]string `protobuf:"bytes,9,rep,name=Params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type Response struct {
	ID         int64             `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ClientID   string            `protobuf:"bytes,2,opt,name=ClientID" json:"ClientID,omitempty"`
	Timestamp  int64             `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Status     int32             `protobuf:"varint,5,opt,name=Status" json:"Status,omitempty"`
	StatusText string            `protobuf:"bytes,6,opt,name=StatusText" json:"StatusText,omitempty"`
	NewToken   string            `protobuf:"bytes,7,opt,name=NewToken" json:"NewToken,omitempty"`
	Content    []byte            `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`
	Params     map[string]string `protobuf:"bytes,9,rep,name=Params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type Message struct {
	ID         int64             `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Path       string            `protobuf:"bytes,2,opt,name=Path" json:"Path,omitempty"`
	Timestamp  int64             `protobuf:"varint,3,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ForwardFor []string          `protobuf:"bytes,4,rep,name=ForwardFor" json:"ForwardFor,omitempty"`
	Token      string            `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
	Content    []byte            `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	Params     map[string]string `protobuf:"bytes,7,rep,name=Params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Message) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "rpc.Request")
	proto.RegisterType((*Response)(nil), "rpc.Response")
	proto.RegisterType((*Message)(nil), "rpc.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FuncService service

type FuncServiceClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (FuncService_ChannelClient, error)
}

type funcServiceClient struct {
	cc *grpc.ClientConn
}

func NewFuncServiceClient(cc *grpc.ClientConn) FuncServiceClient {
	return &funcServiceClient{cc}
}

func (c *funcServiceClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/rpc.FuncService/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funcServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (FuncService_ChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FuncService_serviceDesc.Streams[0], c.cc, "/rpc.FuncService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &funcServiceChannelClient{stream}
	return x, nil
}

type FuncService_ChannelClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type funcServiceChannelClient struct {
	grpc.ClientStream
}

func (x *funcServiceChannelClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *funcServiceChannelClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FuncService service

type FuncServiceServer interface {
	Call(context.Context, *Request) (*Response, error)
	Channel(FuncService_ChannelServer) error
}

func RegisterFuncServiceServer(s *grpc.Server, srv FuncServiceServer) {
	s.RegisterService(&_FuncService_serviceDesc, srv)
}

func _FuncService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuncServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FuncService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuncServiceServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuncService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FuncServiceServer).Channel(&funcServiceChannelServer{stream})
}

type FuncService_ChannelServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type funcServiceChannelServer struct {
	grpc.ServerStream
}

func (x *funcServiceChannelServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *funcServiceChannelServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FuncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.FuncService",
	HandlerType: (*FuncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _FuncService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _FuncService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x35, 0x76, 0x6c, 0xc7, 0x2f, 0x05, 0xa1, 0x11, 0x42, 0x43, 0x84, 0xc0, 0x2a, 0x1b,
	0xb3, 0xb1, 0x4a, 0xd9, 0x00, 0x3b, 0x48, 0x88, 0xc8, 0x02, 0x54, 0xb9, 0xd9, 0xb2, 0x98, 0x38,
	0x4f, 0x24, 0xaa, 0x3d, 0x36, 0x33, 0xe3, 0x86, 0xdc, 0x80, 0x63, 0x70, 0x04, 0x0e, 0xc1, 0xc1,
	0xd0, 0xd8, 0x93, 0xd4, 0x6e, 0xd5, 0x4a, 0x48, 0xdd, 0xbd, 0xef, 0x9b, 0x3f, 0x9e, 0xf7, 0x7b,
	0x9f, 0x0c, 0xa1, 0xac, 0xb2, 0xa4, 0x92, 0xa5, 0x2e, 0xa9, 0x2b, 0xab, 0xec, 0xf8, 0xaf, 0x03,
	0x41, 0x8a, 0x3f, 0x6a, 0x54, 0x9a, 0x3e, 0x04, 0x67, 0x3e, 0x65, 0x24, 0x22, 0xb1, 0x9b, 0x3a,
	0xf3, 0x29, 0x1d, 0xc3, 0x70, 0x92, 0x6f, 0x50, 0xe8, 0xf9, 0x94, 0x39, 0x11, 0x89, 0xc3, 0xf4,
	0xa0, 0xe9, 0x73, 0x80, 0xb6, 0xfe, 0xb0, 0x5a, 0x49, 0xe6, 0x36, 0xab, 0x1d, 0x87, 0x3e, 0x83,
	0x70, 0xb1, 0x29, 0x50, 0x69, 0x5e, 0x54, 0x6c, 0xd0, 0x5c, 0x79, 0x65, 0x98, 0xd3, 0xb3, 0x52,
	0x6e, 0xb9, 0x5c, 0xcd, 0x4a, 0xc9, 0xbc, 0xc8, 0x35, 0xa7, 0xaf, 0x1c, 0x4a, 0x61, 0x70, 0xc6,
	0xf5, 0x9a, 0xf9, 0xcd, 0xbd, 0x4d, 0x4d, 0x1f, 0x83, 0xb7, 0x28, 0x2f, 0x50, 0xb0, 0xa0, 0x31,
	0x5b, 0x41, 0x19, 0x04, 0x93, 0x52, 0x68, 0x14, 0x9a, 0x0d, 0x23, 0x12, 0x1f, 0xa5, 0x7b, 0x49,
	0x4f, 0xc0, 0x3f, 0xe3, 0x92, 0x17, 0x8a, 0x85, 0x91, 0x1b, 0x8f, 0x4e, 0x59, 0x62, 0x5a, 0xb7,
	0xbd, 0x26, 0xed, 0xd2, 0x27, 0xa1, 0xe5, 0x2e, 0xb5, 0xfb, 0xc6, 0xef, 0x60, 0xd4, 0xb1, 0xe9,
	0x23, 0x70, 0x2f, 0x70, 0xd7, 0xf0, 0x08, 0x53, 0x53, 0x9a, 0x27, 0x5c, 0xf2, 0xbc, 0x46, 0x4b,
	0xa3, 0x15, 0xef, 0x9d, 0xb7, 0xe4, 0xf8, 0x8f, 0x03, 0xc3, 0x14, 0x55, 0x55, 0x0a, 0x85, 0xff,
	0xc5, 0xb1, 0xc7, 0xc9, 0xbd, 0xce, 0xe9, 0x09, 0xf8, 0xe7, 0x9a, 0xeb, 0x5a, 0x31, 0x2f, 0x22,
	0xb1, 0x97, 0x5a, 0x65, 0xf8, 0xb5, 0xd5, 0x02, 0x7f, 0x6a, 0x4b, 0xa9, 0xe3, 0x98, 0x2f, 0x7e,
	0xc5, 0x6d, 0x17, 0xd7, 0x41, 0xdf, 0x41, 0xec, 0xf5, 0x35, 0x62, 0x4f, 0x2d, 0xb1, 0xb6, 0xad,
	0xfb, 0x46, 0xf6, 0xcb, 0x81, 0xe0, 0x0b, 0x2a, 0xc5, 0xbf, 0xdf, 0x24, 0xb6, 0x9f, 0xbf, 0xd3,
	0x99, 0xff, 0xdd, 0xa4, 0xfa, 0x89, 0x1a, 0xdc, 0x48, 0xd4, 0x21, 0x3d, 0xde, 0x2d, 0xe9, 0xf1,
	0x6f, 0x4b, 0x4f, 0xd0, 0x49, 0x8f, 0x7d, 0xef, 0x3d, 0xa3, 0x38, 0xfd, 0x06, 0xa3, 0x59, 0x2d,
	0xb2, 0x73, 0x94, 0x97, 0x9b, 0x0c, 0xe9, 0x4b, 0x18, 0x4c, 0x78, 0x9e, 0xd3, 0xa3, 0x6e, 0x62,
	0xc7, 0x0f, 0x7a, 0xd3, 0xa0, 0xaf, 0x20, 0x98, 0xac, 0xb9, 0x10, 0xb8, 0xdf, 0x67, 0xdf, 0x36,
	0xee, 0xa9, 0x98, 0x9c, 0x90, 0x8f, 0x2f, 0x80, 0x65, 0x65, 0x91, 0xac, 0xb1, 0xe0, 0xbb, 0x5a,
	0x24, 0xcb, 0x65, 0xbe, 0x5d, 0x23, 0xe6, 0x66, 0xdf, 0x67, 0xf2, 0x9b, 0x90, 0xa5, 0xdf, 0xfc,
	0x10, 0xde, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x14, 0x2f, 0xa0, 0x1d, 0x04, 0x00, 0x00,
}
