// Code generated by protoc-gen-go.
// source: bblwheel.proto
// DO NOT EDIT!

/*
Package bblwheel is a generated protocol buffer package.

It is generated from these files:
	bblwheel.proto
	rpc.proto

It has these top-level messages:
	Void
	Service
	ConfigEntry
	Config
	UpdateConfigReq
	RegisterResult
	Statistics
	Event
	Request
	Response
	Message
*/
package bblwheel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Service_Status int32

const (
	Service_INIT        Service_Status = 0
	Service_ONLINE      Service_Status = 1
	Service_MAINTENANCE Service_Status = 2
	Service_OFFLINE     Service_Status = 3
	Service_FAULT       Service_Status = 4
	Service_UNAUTHORIZE Service_Status = 5
)

var Service_Status_name = map[int32]string{
	0: "INIT",
	1: "ONLINE",
	2: "MAINTENANCE",
	3: "OFFLINE",
	4: "FAULT",
	5: "UNAUTHORIZE",
}
var Service_Status_value = map[string]int32{
	"INIT":        0,
	"ONLINE":      1,
	"MAINTENANCE": 2,
	"OFFLINE":     3,
	"FAULT":       4,
	"UNAUTHORIZE": 5,
}

func (x Service_Status) String() string {
	return proto.EnumName(Service_Status_name, int32(x))
}
func (Service_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Event_EventType int32

const (
	Event_DISCOVERY    Event_EventType = 0
	Event_CONFIGUPDATE Event_EventType = 1
	Event_STATISTICS   Event_EventType = 2
)

var Event_EventType_name = map[int32]string{
	0: "DISCOVERY",
	1: "CONFIGUPDATE",
	2: "STATISTICS",
}
var Event_EventType_value = map[string]int32{
	"DISCOVERY":    0,
	"CONFIGUPDATE": 1,
	"STATISTICS":   2,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Service struct {
	ID                string         `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name              string         `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Tags              []string       `protobuf:"bytes,3,rep,name=Tags" json:"Tags,omitempty"`
	Address           string         `protobuf:"bytes,4,opt,name=Address" json:"Address,omitempty"`
	DataCenter        string         `protobuf:"bytes,5,opt,name=DataCenter" json:"DataCenter,omitempty"`
	Node              string         `protobuf:"bytes,6,opt,name=Node" json:"Node,omitempty"`
	PID               string         `protobuf:"bytes,7,opt,name=PID" json:"PID,omitempty"`
	Weight            int32          `protobuf:"varint,8,opt,name=Weight" json:"Weight,omitempty"`
	Single            bool           `protobuf:"varint,9,opt,name=Single" json:"Single,omitempty"`
	DependentServices []string       `protobuf:"bytes,10,rep,name=DependentServices" json:"DependentServices,omitempty"`
	DependentConfigs  []string       `protobuf:"bytes,11,rep,name=DependentConfigs" json:"DependentConfigs,omitempty"`
	Status            Service_Status `protobuf:"varint,12,opt,name=status,enum=bblwheel.Service_Status" json:"status,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ConfigEntry struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *ConfigEntry) Reset()                    { *m = ConfigEntry{} }
func (m *ConfigEntry) String() string            { return proto.CompactTextString(m) }
func (*ConfigEntry) ProtoMessage()               {}
func (*ConfigEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Config struct {
	Itmes []*ConfigEntry `protobuf:"bytes,1,rep,name=Itmes" json:"Itmes,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Config) GetItmes() []*ConfigEntry {
	if m != nil {
		return m.Itmes
	}
	return nil
}

type UpdateConfigReq struct {
	ServiceID   string  `protobuf:"bytes,1,opt,name=ServiceID" json:"ServiceID,omitempty"`
	ServiceName string  `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Config      *Config `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *UpdateConfigReq) Reset()                    { *m = UpdateConfigReq{} }
func (m *UpdateConfigReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigReq) ProtoMessage()               {}
func (*UpdateConfigReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateConfigReq) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

type RegisterResult struct {
	DependentServices []*Service         `protobuf:"bytes,1,rep,name=DependentServices" json:"DependentServices,omitempty"`
	DependentConfigs  map[string]*Config `protobuf:"bytes,2,rep,name=DependentConfigs" json:"DependentConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Result            int32              `protobuf:"varint,3,opt,name=Result" json:"Result,omitempty"`
	Desc              string             `protobuf:"bytes,4,opt,name=Desc" json:"Desc,omitempty"`
}

func (m *RegisterResult) Reset()                    { *m = RegisterResult{} }
func (m *RegisterResult) String() string            { return proto.CompactTextString(m) }
func (*RegisterResult) ProtoMessage()               {}
func (*RegisterResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RegisterResult) GetDependentServices() []*Service {
	if m != nil {
		return m.DependentServices
	}
	return nil
}

func (m *RegisterResult) GetDependentConfigs() map[string]*Config {
	if m != nil {
		return m.DependentConfigs
	}
	return nil
}

type Statistics struct {
	ServiceID      string            `protobuf:"bytes,1,opt,name=ServiceID" json:"ServiceID,omitempty"`
	ServiceName    string            `protobuf:"bytes,2,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Count          int64             `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
	UpTime         int64             `protobuf:"varint,4,opt,name=UpTime" json:"UpTime,omitempty"`
	UsedMem        int64             `protobuf:"varint,5,opt,name=UsedMem" json:"UsedMem,omitempty"`
	FreeMem        int64             `protobuf:"varint,6,opt,name=FreeMem" json:"FreeMem,omitempty"`
	Threads        int64             `protobuf:"varint,7,opt,name=Threads" json:"Threads,omitempty"`
	AvgRespTime    int64             `protobuf:"varint,8,opt,name=AvgRespTime" json:"AvgRespTime,omitempty"`
	MinRespTime    int64             `protobuf:"varint,9,opt,name=MinRespTime" json:"MinRespTime,omitempty"`
	MaxRespTime    int64             `protobuf:"varint,10,opt,name=MaxRespTime" json:"MaxRespTime,omitempty"`
	LastActiveTime int64             `protobuf:"varint,11,opt,name=LastActiveTime" json:"LastActiveTime,omitempty"`
	Other          map[string]string `protobuf:"bytes,12,rep,name=Other" json:"Other,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Statistics) Reset()                    { *m = Statistics{} }
func (m *Statistics) String() string            { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()               {}
func (*Statistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Statistics) GetOther() map[string]string {
	if m != nil {
		return m.Other
	}
	return nil
}

type Event struct {
	Type    Event_EventType `protobuf:"varint,1,opt,name=Type,enum=bblwheel.Event_EventType" json:"Type,omitempty"`
	Service *Service        `protobuf:"bytes,2,opt,name=Service" json:"Service,omitempty"`
	Item    *ConfigEntry    `protobuf:"bytes,3,opt,name=Item" json:"Item,omitempty"`
	Stat    *Statistics     `protobuf:"bytes,4,opt,name=Stat" json:"Stat,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Event) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Event) GetItem() *ConfigEntry {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Event) GetStat() *Statistics {
	if m != nil {
		return m.Stat
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "bblwheel.Void")
	proto.RegisterType((*Service)(nil), "bblwheel.Service")
	proto.RegisterType((*ConfigEntry)(nil), "bblwheel.ConfigEntry")
	proto.RegisterType((*Config)(nil), "bblwheel.Config")
	proto.RegisterType((*UpdateConfigReq)(nil), "bblwheel.UpdateConfigReq")
	proto.RegisterType((*RegisterResult)(nil), "bblwheel.RegisterResult")
	proto.RegisterType((*Statistics)(nil), "bblwheel.Statistics")
	proto.RegisterType((*Event)(nil), "bblwheel.Event")
	proto.RegisterEnum("bblwheel.Service_Status", Service_Status_name, Service_Status_value)
	proto.RegisterEnum("bblwheel.Event_EventType", Event_EventType_name, Event_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BblWheel service

type BblWheelClient interface {
	Register(ctx context.Context, in *Service, opts ...grpc.CallOption) (*RegisterResult, error)
	Unregister(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Void, error)
	UpdateStatus(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Void, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*Void, error)
	KeepAlive(ctx context.Context, opts ...grpc.CallOption) (BblWheel_KeepAliveClient, error)
}

type bblWheelClient struct {
	cc *grpc.ClientConn
}

func NewBblWheelClient(cc *grpc.ClientConn) BblWheelClient {
	return &bblWheelClient{cc}
}

func (c *bblWheelClient) Register(ctx context.Context, in *Service, opts ...grpc.CallOption) (*RegisterResult, error) {
	out := new(RegisterResult)
	err := grpc.Invoke(ctx, "/bblwheel.BblWheel/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bblWheelClient) Unregister(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/bblwheel.BblWheel/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bblWheelClient) UpdateStatus(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/bblwheel.BblWheel/UpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bblWheelClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/bblwheel.BblWheel/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bblWheelClient) KeepAlive(ctx context.Context, opts ...grpc.CallOption) (BblWheel_KeepAliveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BblWheel_serviceDesc.Streams[0], c.cc, "/bblwheel.BblWheel/KeepAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &bblWheelKeepAliveClient{stream}
	return x, nil
}

type BblWheel_KeepAliveClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type bblWheelKeepAliveClient struct {
	grpc.ClientStream
}

func (x *bblWheelKeepAliveClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bblWheelKeepAliveClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BblWheel service

type BblWheelServer interface {
	Register(context.Context, *Service) (*RegisterResult, error)
	Unregister(context.Context, *Service) (*Void, error)
	UpdateStatus(context.Context, *Service) (*Void, error)
	UpdateConfig(context.Context, *UpdateConfigReq) (*Void, error)
	KeepAlive(BblWheel_KeepAliveServer) error
}

func RegisterBblWheelServer(s *grpc.Server, srv BblWheelServer) {
	s.RegisterService(&_BblWheel_serviceDesc, srv)
}

func _BblWheel_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BblWheelServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bblwheel.BblWheel/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BblWheelServer).Register(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _BblWheel_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BblWheelServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bblwheel.BblWheel/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BblWheelServer).Unregister(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _BblWheel_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BblWheelServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bblwheel.BblWheel/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BblWheelServer).UpdateStatus(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _BblWheel_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BblWheelServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bblwheel.BblWheel/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BblWheelServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BblWheel_KeepAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BblWheelServer).KeepAlive(&bblWheelKeepAliveServer{stream})
}

type BblWheel_KeepAliveServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type bblWheelKeepAliveServer struct {
	grpc.ServerStream
}

func (x *bblWheelKeepAliveServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bblWheelKeepAliveServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BblWheel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bblwheel.BblWheel",
	HandlerType: (*BblWheelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BblWheel_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _BblWheel_Unregister_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _BblWheel_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _BblWheel_UpdateConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepAlive",
			Handler:       _BblWheel_KeepAlive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bblwheel.proto",
}

func init() { proto.RegisterFile("bblwheel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xdf, 0x8e, 0xdb, 0xc4,
	0x17, 0xae, 0xe3, 0xd8, 0x9b, 0x9c, 0xec, 0x2f, 0xeb, 0x8e, 0xd2, 0x6a, 0x7e, 0x0b, 0x82, 0x28,
	0x17, 0x55, 0xa0, 0x10, 0x4a, 0xd0, 0x8a, 0x82, 0x90, 0x90, 0x9b, 0x3f, 0xd4, 0xea, 0x6e, 0x52,
	0x4d, 0xec, 0x2d, 0xf4, 0xce, 0x1b, 0x1f, 0x12, 0xab, 0x89, 0x13, 0xec, 0x49, 0x20, 0xe2, 0x39,
	0xb8, 0xe7, 0x11, 0xb8, 0xe3, 0x11, 0x78, 0x23, 0xae, 0xd1, 0x8c, 0x27, 0x8e, 0x49, 0x5c, 0x84,
	0xc4, 0x8d, 0x35, 0xe7, 0x3b, 0xdf, 0x99, 0x99, 0x33, 0xdf, 0x39, 0xc7, 0x50, 0xbf, 0xbb, 0x5b,
	0xfc, 0x38, 0x47, 0x5c, 0x74, 0xd6, 0xf1, 0x8a, 0xaf, 0x48, 0x65, 0x6f, 0xb7, 0x4c, 0x28, 0xdf,
	0xae, 0xc2, 0xa0, 0xf5, 0xbb, 0x0e, 0x67, 0x13, 0x8c, 0xb7, 0xe1, 0x14, 0x49, 0x1d, 0x4a, 0x4e,
	0x9f, 0x6a, 0x4d, 0xad, 0x5d, 0x65, 0x25, 0xa7, 0x4f, 0x08, 0x94, 0x47, 0xfe, 0x12, 0x69, 0x49,
	0x22, 0x72, 0x2d, 0x30, 0xd7, 0x9f, 0x25, 0x54, 0x6f, 0xea, 0x02, 0x13, 0x6b, 0x42, 0xe1, 0xcc,
	0x0e, 0x82, 0x18, 0x93, 0x84, 0x96, 0x25, 0x75, 0x6f, 0x92, 0xf7, 0x00, 0xfa, 0x3e, 0xf7, 0x7b,
	0x18, 0x71, 0x8c, 0xa9, 0x21, 0x9d, 0x39, 0x44, 0x9e, 0xb0, 0x0a, 0x90, 0x9a, 0xea, 0x84, 0x55,
	0x80, 0xc4, 0x02, 0xfd, 0xa5, 0xd3, 0xa7, 0x67, 0x12, 0x12, 0x4b, 0xf2, 0x10, 0xcc, 0x57, 0x18,
	0xce, 0xe6, 0x9c, 0x56, 0x9a, 0x5a, 0xdb, 0x60, 0xca, 0x12, 0xf8, 0x24, 0x8c, 0x66, 0x0b, 0xa4,
	0xd5, 0xa6, 0xd6, 0xae, 0x30, 0x65, 0x91, 0x8f, 0xe0, 0x7e, 0x1f, 0xd7, 0x18, 0x05, 0x18, 0x71,
	0x95, 0x5b, 0x42, 0x41, 0x5e, 0xf8, 0xd4, 0x41, 0x3e, 0x04, 0x2b, 0x03, 0x7b, 0xab, 0xe8, 0xfb,
	0x70, 0x96, 0xd0, 0x9a, 0x24, 0x9f, 0xe0, 0xe4, 0x09, 0x98, 0x09, 0xf7, 0xf9, 0x26, 0xa1, 0xe7,
	0x4d, 0xad, 0x5d, 0xef, 0xd2, 0x4e, 0xf6, 0xc0, 0x6a, 0xbf, 0xce, 0x44, 0xfa, 0x99, 0xe2, 0xb5,
	0xbe, 0x05, 0x33, 0x45, 0x48, 0x05, 0xca, 0xce, 0xc8, 0x71, 0xad, 0x7b, 0x04, 0xc0, 0x1c, 0x8f,
	0xae, 0x9d, 0xd1, 0xc0, 0xd2, 0xc8, 0x05, 0xd4, 0x6e, 0x6c, 0x67, 0xe4, 0x0e, 0x46, 0xf6, 0xa8,
	0x37, 0xb0, 0x4a, 0xa4, 0x06, 0x67, 0xe3, 0xe1, 0x50, 0x7a, 0x75, 0x52, 0x05, 0x63, 0x68, 0x7b,
	0xd7, 0xae, 0x55, 0x16, 0x44, 0x6f, 0x64, 0x7b, 0xee, 0xf3, 0x31, 0x73, 0x5e, 0x0f, 0x2c, 0xa3,
	0x75, 0x05, 0xb5, 0xf4, 0x5a, 0x83, 0x88, 0xc7, 0x3b, 0xf1, 0x6c, 0x2f, 0x70, 0xa7, 0xd4, 0x13,
	0x4b, 0xd2, 0x00, 0xe3, 0xd6, 0x5f, 0x6c, 0xf6, 0xfa, 0xa5, 0x46, 0xeb, 0x0a, 0xcc, 0x34, 0x8c,
	0x3c, 0x06, 0xc3, 0xe1, 0x4b, 0x4c, 0xa8, 0xd6, 0xd4, 0xdb, 0xb5, 0xee, 0x83, 0x43, 0x2e, 0xb9,
	0x7d, 0x59, 0xca, 0x69, 0xfd, 0x0c, 0x17, 0xde, 0x3a, 0xf0, 0x39, 0xa6, 0x3e, 0x86, 0x3f, 0x90,
	0x77, 0xa1, 0xaa, 0x92, 0xce, 0xaa, 0xe6, 0x00, 0x90, 0x26, 0xd4, 0x94, 0x91, 0xab, 0xa1, 0x3c,
	0x44, 0xda, 0x60, 0x4e, 0xe5, 0x66, 0x54, 0x6f, 0x6a, 0xed, 0x5a, 0xd7, 0x3a, 0xbe, 0x00, 0x53,
	0xfe, 0xd6, 0x6f, 0x25, 0xa8, 0x33, 0x9c, 0x85, 0x09, 0xc7, 0x98, 0x61, 0xb2, 0x59, 0x70, 0xf2,
	0x75, 0x91, 0xc6, 0x69, 0x22, 0xf7, 0x4f, 0x44, 0x29, 0x92, 0xfd, 0x75, 0x81, 0xec, 0x25, 0x19,
	0xdf, 0x39, 0xc4, 0xff, 0xfd, 0xd0, 0xce, 0x71, 0x40, 0xfa, 0x42, 0xa7, 0x65, 0xf2, 0x10, 0xcc,
	0x34, 0x42, 0x66, 0x66, 0x30, 0x65, 0x89, 0x72, 0xef, 0x63, 0x32, 0x55, 0x5d, 0x22, 0xd7, 0x97,
	0x1e, 0x3c, 0x28, 0xdc, 0x56, 0x08, 0xfa, 0xe6, 0x20, 0xe8, 0x1b, 0xdc, 0x91, 0x47, 0x60, 0x6c,
	0x33, 0x41, 0x8b, 0xde, 0x2b, 0x75, 0x7f, 0x59, 0x7a, 0xaa, 0xb5, 0xfe, 0xd0, 0x01, 0x44, 0xe1,
	0x85, 0x09, 0x0f, 0xa7, 0xc9, 0x7f, 0xd6, 0xaa, 0x01, 0x46, 0x6f, 0xb5, 0x89, 0xd2, 0x84, 0x74,
	0x96, 0x1a, 0x22, 0x4f, 0x6f, 0xed, 0x86, 0x4b, 0x94, 0x19, 0xe9, 0x4c, 0x59, 0x62, 0x20, 0x78,
	0x09, 0x06, 0x37, 0xb8, 0x94, 0x3d, 0xaf, 0xb3, 0xbd, 0x29, 0x3c, 0xc3, 0x18, 0x51, 0x78, 0xcc,
	0xd4, 0xa3, 0x4c, 0xe1, 0x71, 0xe7, 0x31, 0xfa, 0x41, 0x22, 0x5b, 0x5f, 0x67, 0x7b, 0x53, 0xdc,
	0xce, 0xde, 0xce, 0x18, 0x26, 0xe9, 0x51, 0x15, 0xe9, 0xcd, 0x43, 0x82, 0x71, 0x13, 0x46, 0x19,
	0xa3, 0x9a, 0x32, 0x72, 0x90, 0x64, 0xf8, 0x3f, 0x65, 0x0c, 0x50, 0x8c, 0x03, 0x44, 0x1e, 0x41,
	0xfd, 0xda, 0x4f, 0xb8, 0x3d, 0xe5, 0xe1, 0x16, 0x25, 0xa9, 0x26, 0x49, 0x47, 0x28, 0xb9, 0x02,
	0x63, 0xcc, 0xe7, 0x18, 0xd3, 0x73, 0x59, 0x2c, 0xef, 0xe7, 0x8a, 0x2d, 0x7b, 0xee, 0x8e, 0x64,
	0xa8, 0xfe, 0x91, 0xeb, 0xcb, 0xa7, 0x00, 0x07, 0xb0, 0x40, 0xdb, 0x46, 0x5e, 0xdb, 0x6a, 0x5e,
	0xc9, 0x3f, 0x35, 0x30, 0x06, 0x5b, 0x8c, 0x38, 0xf9, 0x18, 0xca, 0xee, 0x6e, 0x8d, 0x32, 0xac,
	0xde, 0xfd, 0xff, 0xe1, 0x64, 0xe9, 0x4e, 0xbf, 0x82, 0xc0, 0x24, 0x8d, 0x3c, 0xce, 0x26, 0xbb,
	0x2a, 0x98, 0x82, 0xc6, 0xc8, 0x66, 0xff, 0x07, 0x50, 0x76, 0x38, 0x2e, 0x55, 0x2b, 0xbe, 0x65,
	0x16, 0x48, 0x0a, 0x69, 0x43, 0x59, 0xa4, 0x2a, 0x35, 0xaf, 0x75, 0x1b, 0x45, 0x0f, 0xc0, 0x24,
	0xa3, 0xf5, 0x15, 0x54, 0xb3, 0x4b, 0x91, 0xff, 0x41, 0xb5, 0xef, 0x4c, 0x7a, 0xe3, 0xdb, 0x01,
	0xfb, 0xce, 0xba, 0x47, 0x2c, 0x38, 0xef, 0x8d, 0x47, 0x43, 0xe7, 0x1b, 0xef, 0x65, 0xdf, 0x76,
	0xc5, 0x28, 0xac, 0x03, 0x4c, 0x5c, 0xdb, 0x75, 0x26, 0xae, 0xd3, 0x9b, 0x58, 0xa5, 0xee, 0x2f,
	0x25, 0xa8, 0x3c, 0xbb, 0x5b, 0xbc, 0x12, 0x7b, 0x93, 0xcf, 0xa1, 0xb2, 0x6f, 0x46, 0x72, 0x9a,
	0xc7, 0x25, 0x7d, 0x5b, 0xcf, 0x92, 0x4f, 0x00, 0xbc, 0x28, 0xfe, 0x87, 0xd0, 0xfa, 0x01, 0x12,
	0x7f, 0x44, 0xf2, 0x29, 0x9c, 0xa7, 0x93, 0x4e, 0xcd, 0xed, 0x7f, 0x11, 0xf2, 0xc5, 0x3e, 0x44,
	0x4d, 0xd6, 0x9c, 0x34, 0x47, 0x43, 0xb3, 0xe0, 0xb4, 0xea, 0x0b, 0xc4, 0xb5, 0xbd, 0x08, 0xb7,
	0x48, 0x2e, 0x8e, 0x24, 0xbd, 0x3c, 0x06, 0xda, 0xda, 0x13, 0xed, 0xd9, 0x3b, 0xd0, 0x98, 0xae,
	0x96, 0x9d, 0x39, 0x2e, 0xfd, 0xdd, 0x26, 0xca, 0x18, 0xcf, 0xb5, 0x5f, 0x35, 0xed, 0xce, 0x94,
	0x3f, 0xfa, 0xcf, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x16, 0x8d, 0x33, 0xfa, 0x07, 0x00,
	0x00,
}
